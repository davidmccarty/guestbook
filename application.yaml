apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: guestbook-application
  namespace: guestbook
  generation: 2
  ownerReferences:
    - name: guestbook-application
      apiVersion: tools.hybridapp.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: ApplicationAssembler
spec:
  componentKinds:
    - group: core.hybridapp.io
      kind: Deployable
  descriptor: {}
  selector:
    matchLabels:
      tools.hybridapp.io/application-1c74d9f0-2c67-49a4-87e0-a6cf6a204046: 1c74d9f0-2c67-49a4-87e0-a6cf6a204046
---
apiVersion: core.hybridapp.io/v1alpha1
kind: Deployable
metadata:
  name: deployment-guestbook-frontend
  namespace: guestbook
  generation: 1
  labels:
    tools.hybridapp.io/application-1c74d9f0-2c67-49a4-87e0-a6cf6a204046: 1c74d9f0-2c67-49a4-87e0-a6cf6a204046
spec:
  hybridtemplates:
    - deployerType: kubernetes
      template:
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: frontend
          namespace: guestbook
          labels:
            app: guestbook
        spec:
          progressDeadlineSeconds: 600
          replicas: 3
          revisionHistoryLimit: 10
          selector:
            matchLabels:
              app: guestbook
              tier: frontend
          strategy:
            rollingUpdate:
              maxSurge: 25%
              maxUnavailable: 25%
            type: RollingUpdate
          template:
            metadata:
              labels:
                app: guestbook
                tier: frontend
            spec:
              containers:
                - name: php-redis
                  env:
                    - name: GET_HOSTS_FROM
                      value: dns
                  image: 'gcr.io/google-samples/gb-frontend:v4'
                  imagePullPolicy: IfNotPresent
                  ports:
                    - containerPort: 80
                      protocol: TCP
                  resources:
                    requests:
                      cpu: 100m
                      memory: 100Mi
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
              dnsPolicy: ClusterFirst
              restartPolicy: Always
              schedulerName: default-scheduler
              securityContext: {}
              terminationGracePeriodSeconds: 30
  placement:
    deployers:
      - namespace: guestbook
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: frontend
  namespace: guestbook
  generation: 2
  labels:
    app: guestbook
    core.hybridapp.io/controlled-by: hybriddeployable
    core.hybridapp.io/hosting-hybriddeployable: deployment-guestbook-frontend
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: guestbook
      tier: frontend
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: guestbook
        tier: frontend
    spec:
      containers:
        - name: php-redis
          env:
            - name: GET_HOSTS_FROM
              value: dns
          image: 'gcr.io/google-samples/gb-frontend:v4'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: core.hybridapp.io/v1alpha1
kind: Deployable
metadata:
  name: deployment-guestbook-redis-master
  namespace: guestbook
  generation: 1
  labels:
    tools.hybridapp.io/application-1c74d9f0-2c67-49a4-87e0-a6cf6a204046: 1c74d9f0-2c67-49a4-87e0-a6cf6a204046
spec:
  hybridtemplates:
    - deployerType: kubernetes
      template:
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: redis-master
          namespace: guestbook
          labels:
            app: redis
        spec:
          progressDeadlineSeconds: 600
          replicas: 1
          revisionHistoryLimit: 10
          selector:
            matchLabels:
              app: redis
              role: master
              tier: backend
          strategy:
            rollingUpdate:
              maxSurge: 25%
              maxUnavailable: 25%
            type: RollingUpdate
          template:
            metadata:
              labels:
                app: redis
                role: master
                tier: backend
            spec:
              containers:
                - name: master
                  image: 'k8s.gcr.io/redis:e2e'
                  imagePullPolicy: IfNotPresent
                  ports:
                    - containerPort: 6379
                      protocol: TCP
                  resources:
                    requests:
                      cpu: 100m
                      memory: 100Mi
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
              dnsPolicy: ClusterFirst
              restartPolicy: Always
              schedulerName: default-scheduler
              securityContext: {}
              terminationGracePeriodSeconds: 30
  placement:
    deployers:
      - namespace: guestbook
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: redis-master
  namespace: guestbook
  generation: 2
  labels:
    app: redis
    core.hybridapp.io/controlled-by: hybriddeployable
    core.hybridapp.io/hosting-hybriddeployable: deployment-guestbook-redis-master
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redis
      role: master
      tier: backend
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
        - name: master
          image: 'k8s.gcr.io/redis:e2e'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6379
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: core.hybridapp.io/v1alpha1
kind: Deployable
metadata:
  name: deployment-guestbook-redis-slave
  namespace: guestbook
  generation: 1
  labels:
    tools.hybridapp.io/application-1c74d9f0-2c67-49a4-87e0-a6cf6a204046: 1c74d9f0-2c67-49a4-87e0-a6cf6a204046
spec:
  hybridtemplates:
    - deployerType: kubernetes
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: redis-slave
          namespace: guestbook
          labels:
            app: redis
        spec:
          progressDeadlineSeconds: 600
          replicas: 2
          revisionHistoryLimit: 10
          selector:
            matchLabels:
              app: redis
              role: slave
              tier: backend
          strategy:
            rollingUpdate:
              maxSurge: 25%
              maxUnavailable: 25%
            type: RollingUpdate
          template:
            metadata:
              labels:
                app: redis
                role: slave
                tier: backend
            spec:
              containers:
                - name: slave
                  env:
                    - name: GET_HOSTS_FROM
                      value: dns
                  image: 'gcr.io/google_samples/gb-redisslave:v3'
                  imagePullPolicy: IfNotPresent
                  ports:
                    - containerPort: 6379
                      protocol: TCP
                  resources:
                    requests:
                      cpu: 100m
                      memory: 100Mi
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
              dnsPolicy: ClusterFirst
              restartPolicy: Always
              schedulerName: default-scheduler
              securityContext: {}
              terminationGracePeriodSeconds: 30
  placement:
    deployers:
      - namespace: guestbook
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-slave
  namespace: guestbook
  generation: 2
  labels:
    app: redis
    core.hybridapp.io/controlled-by: hybriddeployable
    core.hybridapp.io/hosting-hybriddeployable: deployment-guestbook-redis-slave
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redis
      role: slave
      tier: backend
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: redis
        role: slave
        tier: backend
    spec:
      containers:
        - name: slave
          env:
            - name: GET_HOSTS_FROM
              value: dns
          image: 'gcr.io/google_samples/gb-redisslave:v3'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6379
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: core.hybridapp.io/v1alpha1
kind: Deployable
metadata:
  name: service-guestbook-frontend
  namespace: guestbook
  generation: 1
  labels:
    tools.hybridapp.io/application-1c74d9f0-2c67-49a4-87e0-a6cf6a204046: 1c74d9f0-2c67-49a4-87e0-a6cf6a204046
spec:
  hybridtemplates:
    - deployerType: kubernetes
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: frontend
          namespace: guestbook
          finalizers:
            - service.kubernetes.io/load-balancer-cleanup
          labels:
            app: guestbook
            tier: frontend
        spec:
          clusterIP: 172.21.63.119
          externalTrafficPolicy: Cluster
          ports:
            - nodePort: 30429
              port: 80
              protocol: TCP
              targetPort: 80
          selector:
            app: guestbook
            tier: frontend
          sessionAffinity: None
          type: LoadBalancer
  placement:
    deployers:
      - namespace: guestbook
---
apiVersion: core.hybridapp.io/v1alpha1
kind: Deployable
metadata:
  name: service-guestbook-redis-master
  namespace: guestbook
  generation: 1
  labels:
    tools.hybridapp.io/application-1c74d9f0-2c67-49a4-87e0-a6cf6a204046: 1c74d9f0-2c67-49a4-87e0-a6cf6a204046
spec:
  hybridtemplates:
    - deployerType: kubernetes
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: redis-master
          namespace: guestbook
          labels:
            app: redis
            role: master
            tier: backend
        spec:
          clusterIP: 172.21.82.218
          ports:
            - name: redis
              port: 6379
              protocol: TCP
              targetPort: 6379
          selector:
            app: redis
            role: master
            tier: backend
          sessionAffinity: None
          type: ClusterIP
  placement:
    deployers:
      - namespace: guestbook
---
apiVersion: core.hybridapp.io/v1alpha1
kind: Deployable
metadata:
  name: service-guestbook-redis-slave
  namespace: guestbook
  generation: 1
  labels:
    tools.hybridapp.io/application-1c74d9f0-2c67-49a4-87e0-a6cf6a204046: 1c74d9f0-2c67-49a4-87e0-a6cf6a204046
spec:
  hybridtemplates:
    - deployerType: kubernetes
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: redis-slave
          namespace: guestbook
          labels:
            app: redis
            role: slave
            tier: backend
        spec:
          clusterIP: 172.21.67.187
          ports:
            - port: 6379
              protocol: TCP
              targetPort: 6379
          selector:
            app: redis
            role: slave
            tier: backend
          sessionAffinity: None
          type: ClusterIP
  placement:
    deployers:
      - namespace: guestbook
